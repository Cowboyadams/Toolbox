Git & GitHub Commands
    git init
        -initializes git in current folder/creates a new git repository
    git add .
        -prepares all files and folders in current folders for a commit
    git reset
        -unstages (undos what 'git add . does) staged files
    git add /users/example/example
        -prepares specified folder or file for a commit
    git commit -m "blah blah blah"
        -creates and saves a snapshot of what you used as a "commit" and creates log based off of what is in quotes
    git commit -am "blah blah blah"
        -combines the "git add ." and "git commit -m "blah" commands. i.e. Stages and commits in one command
V   V   V   ****JAVASCRIPT****  V   V   V
Javascript variables
    1. var: create a global variable (value might change)
    2. let: create a local variable (value might change)
    3. const: create a constant (value will not change)
Math Operators 
    1. + addition
    2. - subtraction
    3. * multiplication
    4. / division
    5. % modulo (remainder)
Logical Operators
    1. > greater than
    2. >= greater than or equal to
    3.< less than
    4. <= less than or equal to
    5. === equal to
    6. !== not equal to
    7. && and
    8. || or
for-loops
    for (let i =0; i < 5; i++) {

    }
while-loops
    while (x < 50) {
        
    }
Arrays
    var Arr = [1, 2, 3]
Array variables
   1. .push() allows you to add an item to the end of an array.
    2. .pop() removes the last item from an array.
       If you put something in the parentheses, it will remove the item but it will save it to the var that you put in the parentheses
    4. .shift() removes the first item from an array.
        Can also put a var in parentheses that it will save it to 
    5. .unshift() allows you to add an item to the front of an array.
    6. .slice() makes a shallow copy of the array that it’s chained on to. It takes two arguments, the starting and ending indices of the array you want to copy. The ending index is not included in what is copied. This method does not change the initial array.
    7. .splice() is the most dynamic of all for editing arrays. It takes 3 arguments:
        a. The index at which we want to begin editing
        b. How many items to remove from the array
        c. Any values to replace at that index
    8. .length All arrays have a length property by default. As the name would suggest this returns the length of the array. Remember that while arrays are zero indexed, length is not.
    9. .reverse Flips the array
Converting Data Types
    1. converting to a Boolean: 
        - Boolean() 
        - only '0' and '' (no space) will return false values
    2. Converting to a Number
        - Number()
        - +()
        -parseInt()
    3. Converting to a string 
        - string()
        - ( "string example " + 5 ) will make everything a string
 Checking Conditions
    1. .includes() checks to see if a specified string is contained in another and returns true or false.
    2. .startsWith() checks to see if a string starts with a certain character and returns true or false.
    3. .endsWith() checks to see if a string ends with a certain character and returns true or false.
Manipulating Strings   
    1. .trim() takes any whitespace off the beginning and end of a string.
    2. .toUpperCase() and .toLowerCase() do what they sound like! They’ll make all the letters in a string upper or lower case.
    3. .replace('x', 'y') will replace the first instance of a string with a new one. (replaces 'x' with y)
    4. .replaceAll('x', 'y') will replace every instance of a string with a new one (replaces 'x' with 'y')(this will only work with newer versions of node).
    5. .split() will split a string into multiple strings in an array according to the character we send in.
        - Passing an empty string to .split() will create a new string for every character including spaces
    6. .join() will join an array of strings together into one string
        - Joining with no argument will automatically put commas into the new string. (I.e. .join())
        - We can put in an empty string to omit the commas. (I.e .join (''))
        - Passing in a space or any character will insert that character between each entry in the array. (I.e. .join(' '))
Functions
    function doSomething() {
        ...
        }

    Parts:
        1. function - The function key word. - Indicates that the following block of code is a function.
        2.  doSomething - The name of the function. - You can name a function whatever you want. Function names should be lowerCamelCase.
        3. () - Function parameters go inside parentheses. - This function has no parameters. We will explain parameters momentarily.
        4. { } - Opening and closing curly braces, which represent the body of a function. - Inside of the body is where you will put your code.

    Calling a Function
        - It is important to know that creating a function does not make it run. It only runs at the time in which it is called. To call a function, simply type the function name, followed by (). If the function has any parameters, you need to pass those values into the ().
        - Ex. 
            function logMyName(name) {
            console.log(name)
            }

            logMyName('Cameron') // Output: Cameron
   
    Return values
        - In this example, this function returns 16.58 to the call site, which then makes that line of code equivalent to saying purse -= 16.58.
        - Ex.
            let purse = 20

            function calculateTotal(item1, item2) {
            return item1 + item2
            }

            purse -= calculateTotal(6.59, 9.99)  // updates purse to equal 20 - 16.58
    Tips:
        -Try and have your function before (above) where you are trying to invoke it
Function Callbacks
    - A callback is a function that is passed to another function and invoked within the outer function
    - Being a callback doesn’t change anything about a function’s definition, it’s just a different way of using the function
Other Function Syntaxes
    1. Function Decralation syntax (how it is explained above)
        function giveMeFive() {
        return 5
        }
    
    2. Function Expression syntax
        const sayHi = function() {
        return 'Hi!'
        }
    
    3. Arrow syntax
        const sayBye = () => {
        return 'Bye!'
        }
Higher Order Array methods
    - these functions built into JavaScript that accept callbacks as arguments
    - All of these methods loop over the given array and perform actions according to the callback function we create
    - forEach, map, and filter invoke the callbacks passed to them with up to 3 arguments: element, index, and array (reduce is a little different)
        1. element stands for each individual item in the array (could be a string, an object, a number, whatever is in the array)
            - Element is the only required one
        2. index is the index of the current element
        3. array is the array that the method was called on
    1. .forEach
        - Loops through an array and “for each” element, executes any specified functionality
        - Does not necessarily modify the original array, but can if the callback is specified to do so
        - Very similar to a for-loop, except we have easier access to the values and their indexes because of the callback’s parameters
            example:
            numArray.forEach(function(element, index){
            console.log(`${element} is at index ${index}`)
            })
    2. .filter 
        - creates a new array, but with some values filtered out
        - The callback function needs to return true or false, and will most often return a conditional statement
        - If that statement evaluates to true the element will be included in the new array
        - .filter is not destructive (the original array will stay the same)
    3. .map 
        - Map does not modify the original array
        - It returns a copy of the original array, with any changes implemented in the callback applied
    4. .reduce 
        - Executes a “reducing” callback function and returns a single value
        - The callback will be invoked with at least two arguments: the accumulator and the current value (the index and array can also be included as the 3rd and 4th args)
        - We can set the initial value of the accumulator. If we don’t, it will default to the first value in the array
        - .reduce is often used to create a total sum, but can be used for other (more advanced) purposes
    - Methods can be chained together, allowing you to perform multiple operations on one array concisely. Example:
        const myNum = numArray.filter(num => num > 2).map(num => num * 3).reduce((acc, curr) => acc - curr)
Objects
    -syntax
     const dog = {
        'name': 'Freida',
        'color': 'brown/black',
        'hunger': 40,
        'mood': 'feisty',
        'age': 9,
        };  
    -how to access values in Objects
        - console.log(dog.name) (dot notation)
        - console.log(dog['name']) (bracket notation)
    - additional syntax
        -destucturing
            1. let {age} = dog (creates new variable called dog outside of the object and uses 'age' as its value)
            2. let  {name, color, age} = dog (creates three new variables with respecive values)
            3. let {age: spotAge} = dog (creates bew variable called 'spotAge' and uses age in the object as value)
    -how to loop through an object
        - for (let attribute in dog) {
            console.log(`The dog's ${attribute} is ${dog[attribute]}.`);
            }
            (this loops through the objects values, naming them and then console.logs the value of said value
    -how to add values
        1. dog.nickname = 'Puppers'; (dot notation)
        2. dog['nickname'] = 'Puppers'; (bracket notation)
    -how to remove values
        1. delete dog.hunger 
Classesz
    -deffinition:
        A class is like a factory that knows hoy to make objects of a single type. acts like a blueprint for future objects. also lets you define object behavors or methods
    -example
          class Dog {
         constructor(name, color){
         this.name = name;
         this.color = color;
         } bark() {
         console.log('Arf! I am', this.name, 'the dog!');
         }
            }
         - 'Dog' names or defines the template for all dogs
         - 'constructor' allows you to assign data specific to each individual dog
         - 'bark' is the behavor, that each dog knows
            < 'this.name' means “get the name of whatever dog is trying to bark right now”
    - creating objects
        let dog1 = new Dog('Freida', 'brown');
        let dog2 = new Dog('Sally', 'pink');
            (this will create two new dogs, one having the name value of freida and having the color value of brown, and the other have sally and pink to their respective values)
    - Extending exsisting classes 
        class Dog {
        ...
        }
        class Puppy extends Dog {
         constructor(name, color, trainingLevel) {
           super(name, color)

            this.trainingLevel = trainingLevel
         }

         levelUp(num) {
           this.trainingLevel += num
         }
        }    
V   V   V   ****HTML****  V   V   V    
HTML info
    - HTML stands for Hyper Text Markup Language
    - HTML is used to create the infrastructure of a webpage
    - HTML is NOT a programming language; HTML is considered a “markup” language. Markup languages are used to categorize content
common elements
    - <div></div> div tags are used to divide a page into sections, they usually contain other elements
    - <p></p> paragraph, or p, tags are used to hold text
    - <h1></h1> heading tags (h1 - h6) are used to define headings, with 1 being the largest
    - <img/> image tags are used to display images
    - <footer></footer> the footer of the page
    - <header></header> the header of the page
    - <nav></nav> 
    - <form></form>
    - <table></table>
    - <articles></articles>
    - <section></section> diffines sections on your page
    - <float></float> floats left, center, or tight
    - <center></center> centers element
    - <input /> often inside of forms, make sure to attach lables
    - <button></button> creates a button

V   V   V   ****CSS****  V   V   V   
CSS info
    - Stands for Cascading Style Sheets
    - CSS is used to style HTML and create layouts
    - CSS can also respond to some user interactions and create animations
    - The most basic way to select HTML elements is by their tagname, such as div, h3, or button. Selecting this way will affect all of the elements with that tagname in our HTML.
        button {
        background-color: green;
        }
    - You can use more than one selector separated by a comma to apply styles to multiple elements.
        h1, h2, h3 {
        color: teal;
         margin: 20px;
            }
    - To get even more specific, we can use combinators.
       1.  > child selector: selects direct children only
       2.  ' ' descendant selector: selects children, grandchildren, etc.
