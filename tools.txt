Git & GitHub Commands
    git init
        -initializes git in current folder/creates a new git repository
    git add .
        -prepares all files and folders in current folders for a commit
    git reset
        -unstages (undos what 'git add . does) staged files
    git add /users/example/example
        -prepares specified folder or file for a commit
    git commit -m "blah blah blah"
        -creates and saves a snapshot of what you used as a "commit" and creates log based off of what is in quotes
    git commit -am "blah blah blah"
        -combines the "git add ." and "git commit -m "blah" commands. i.e. Stages and commits in one command
Javascript variables
    1. var: create a global variable (value might change)
    2. let: create a local variable (value might change)
    3. const: create a constant (value will not change)
Math Operators 
    1. + addition
    2. - subtraction
    3. * multiplication
    4. / division
    5. % modulo (remainder)
Logical Operators
    1. > greater than
    2. >= greater than or equal to
    3.< less than
    4. <= less than or equal to
    5. === equal to
    6. !== not equal to
    7. && and
    8. || or
for-loops
    for (let i =0; i < 5; i++) {

    }
while-loops
    while (x < 50) {
        
    }
Arrays
    var Arr = [1, 2,3]
Array variables
   1. .push() allows you to add an item to the end of an array.
    2. .pop() removes the last item from an array.
       If you put something in the parentheses, it will remove the item but it will save it to the var that you put in the parentheses
    4. .shift() removes the first item from an array.
        Can also put a var in parentheses that it will save it to 
    5. .unshift() allows you to add an item to the front of an array.
    6. .slice() makes a shallow copy of the array that it’s chained on to. It takes two arguments, the starting and ending indices of the array you want to copy. The ending index is not included in what is copied. This method does not change the initial array.
    7. .splice() is the most dynamic of all for editing arrays. It takes 3 arguments:
        a. The index at which we want to begin editing
        b. How many items to remove from the array
        c. Any values to replace at that index
    8. .length All arrays have a length property by default. As the name would suggest this returns the length of the array. Remember that while arrays are zero indexed, length is not. For example: 
Converting Data Types
    1. converting to a Boolean: 
        - Boolean() 
        - only '0' and '' (no space) will return false values
    2. Converting to a Number
        - Number()
        - +()
        -parseInt()
    3. Converting to a string 
        - string()
        - ( "string example " + 5 ) will make everything a string
 Checking Conditions
    1. .includes() checks to see if a specified string is contained in another and returns true or false.
    2. .startsWith() checks to see if a string starts with a certain character and returns true or false.
    3. .endsWith() checks to see if a string ends with a certain character and returns true or false.
Manipulating Strings   
    1. .trim() takes any whitespace off the beginning and end of a string.
    2. .toUpperCase() and .toLowerCase() do what they sound like! They’ll make all the letters in a string upper or lower case.
    3. .replace('x', 'y') will replace the first instance of a string with a new one. (replaces 'x' with y)
    4. .replaceAll('x', 'y') will replace every instance of a string with a new one (replaces 'x' with 'y')(this will only work with newer versions of node).
    5. .split() will split a string into multiple strings in an array according to the character we send in.
        - Passing an empty string to .split() will create a new string for every character including spaces
    6. .join() will join an array of strings together into one string
        - Joining with no argument will automatically put commas into the new string. (I.e. .join())
        - We can put in an empty string to omit the commas. (I.e .join (''))
        - Passing in a space or any character will insert that character between each entry in the array. (I.e. .join(' '))
Functions
    function doSomething() {
        ...
        }

    Parts:
        1. function - The function key word. - Indicates that the following block of code is a function.
        2.  doSomething - The name of the function. - You can name a function whatever you want. Function names should be lowerCamelCase.
        3. () - Function parameters go inside parentheses. - This function has no parameters. We will explain parameters momentarily.
        4. { } - Opening and closing curly braces, which represent the body of a function. - Inside of the body is where you will put your code.

    Calling a Function
        - It is important to know that creating a function does not make it run. It only runs at the time in which it is called. To call a function, simply type the function name, followed by (). If the function has any parameters, you need to pass those values into the ().
        - Ex. 
            function logMyName(name) {
            console.log(name)
            }

            logMyName('Cameron') // Output: Cameron
   
    Return values
        - In this example, this function returns 16.58 to the call site, which then makes that line of code equivalent to saying purse -= 16.58.
        - Ex.
            let purse = 20

            function calculateTotal(item1, item2) {
            return item1 + item2
            }

            purse -= calculateTotal(6.59, 9.99)  // updates purse to equal 20 - 16.58
    Tips:
        -Try and have your function before (above) where you are trying to invoke it
Other Function Syntaxesadec
    1. Function Decralation syntax (how it is explained above)
        function giveMeFive() {
        return 5
        }
    
    2. Function Expression syntax
        const sayHi = function() {
        return 'Hi!'
        }
    
    3. Arrow syntax
        const sayBye = () => {
        return 'Bye!'
        }